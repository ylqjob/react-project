{"version":3,"sources":["views/index.js","components/layout/Sider.js","components/layout/Header.js","components/layout/Main.js","components/layout/Layout.js","store/index.js","App.js","main.js"],"names":["id","text","icon","children","path","component","loadable","SubMenu","Menu","console","log","routes","props","className","mode","theme","map","ele","title","Item","to","exact","notExact","history","useHistory","res","recursionRoute","arr","push","createRoutes","from","Header","Layout","Sider","Content","width","initState","msg","foo","count","store","createStore","state","action","newState","JSON","parse","stringify","type","payload","App","ReactDOM","render","document","getElementById"],"mappings":"uNAKe,GACb,CACEA,GAAI,GACJC,KAAM,2BACNC,KAAM,GACNC,SAAU,CACR,CACEH,GAAI,KACJC,KAAM,eACNG,KAAM,IACNC,UAbKC,aAAS,kBAAI,qC,SCIlBC,EAAYC,IAAZD,QAERE,QAAQC,IAAI,SAAUC,GAEP,eAAAC,GAwBb,OACE,qBAAKC,UAAU,WAAf,SAEA,cAAC,IAAD,CACEC,KAAK,SACLC,MAAM,OAFR,SArBOJ,EAAOK,KAAI,SAAAC,GAAG,OACnB,cAACV,EAAD,CAAsBW,MAAOD,EAAIhB,KAAMC,KAAMe,EAAIf,KAAjD,SAEIe,EAAId,UAAYc,EAAId,SAASa,KAAI,SAAAC,GAAG,OAClC,cAAC,IAAKE,KAAN,UACE,cAAC,IAAD,CACEC,GAAIH,EAAIb,KACRiB,OAAQJ,EAAIK,SAFd,SAIGL,EAAIhB,QALOgB,EAAIjB,QAHZiB,EAAIjB,Y,QCGT,WAAAY,GACb,IAAMW,EAAUC,cAGhB,OAFAf,QAAQC,IAAI,kBAAmBE,GAC/BH,QAAQC,IAAI,oBAAqBa,GAE/B,qBAAKV,UAAU,YAAf,qBChBW,WAAAD,GA+Bb,OACE,qBAAKC,UAAU,UAAf,SAME,eAAC,IAAD,WAlCiB,WACnB,IAAIY,EAAM,GAEJC,EAAiB,SAAjBA,EAAiBC,GACrBA,EAAIX,KAAI,SAAAC,GACNQ,EAAIG,KACF,cAAC,IAAD,CAEExB,KAAMa,EAAIb,KACVC,UAAWY,EAAIZ,UACfgB,OAAK,GAHAJ,EAAIjB,KAMViB,EAAId,UAAUuB,EAAeT,EAAId,cAWxC,OAPAQ,EAAOK,KAAI,SAAAC,GACNA,EAAId,UAELuB,EAAeT,EAAId,aAIhBsB,EAWDI,GACF,cAAC,IAAD,CAAUC,KAAK,KAAKV,GAAG,YCxCvBW,G,OAA2BC,IAA3BD,QAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QAER,WAAAtB,GACb,OACE,qBAAKC,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAOsB,MAAM,MAAb,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,WACE,cAAC,EAAD,UACE,cAAC,EAAD,MAEF,cAACD,EAAD,UACE,cAAC,EAAD,e,gBCfRE,EAAY,CACdC,IAAK,aACLC,IAAK,CACHC,MAAO,IAyBX,IACeC,EADDC,aAtBd,WAA2C,IAA1BC,EAAyB,uDAAnBN,EAAWO,EAAQ,uCAIxClC,QAAQC,IAAI,6DAAsBiC,GAIlC,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUL,IACzC,OAAQC,EAAOK,MACb,IAAK,SACHJ,EAASP,IAAMM,EAAOM,QACtB,MACF,IAAK,MACHL,EAASN,IAAIC,OAASI,EAAOM,QAC7B,MACF,QACE,OAAOP,EAEX,OAAOE,KCbMM,MAbf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,qBAAK3B,UAAU,MAAf,SACE,cAACmB,EAAD,W,OCLVmB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.5d15c345.chunk.js","sourcesContent":["import loadable from '@loadable/component'\r\n\r\nconst Home = loadable(()=>import('./home/Home'))\r\n\r\n\r\nexport default [ // eslint-disable-line\r\n  {\r\n    id: 11,\r\n    text: '概况管理',\r\n    icon: '',\r\n    children: [\r\n      {\r\n        id: 1111,\r\n        text: '首页',\r\n        path: '/',\r\n        component: Home\r\n      }\r\n    ]\r\n  },\r\n]\r\n","import React from 'react'\r\n\r\nimport routes from '@/views'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport { Menu } from 'antd'\r\nconst { SubMenu } = Menu\r\n\r\nconsole.log('routes', routes)\r\n\r\nexport default props=>{\r\n\r\n  // 用于生成菜单\r\n  const createNavLink = ()=>{\r\n    // exact=true，当url和NavLink.to 完全相等时才高亮\r\n    // exact=flase，当url和NavLink.to 相似就高亮\r\n    return routes.map(ele=>(\r\n      <SubMenu key={ele.id} title={ele.text} icon={ele.icon}>\r\n        {\r\n          ele.children && ele.children.map(ele=>(\r\n            <Menu.Item key={ele.id}>\r\n              <NavLink\r\n                to={ele.path}\r\n                exact={!ele.notExact}\r\n              >\r\n                {ele.text}\r\n              </NavLink>\r\n            </Menu.Item>\r\n          ))\r\n        }\r\n      </SubMenu>\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div className='qf-sider'>\r\n\r\n    <Menu\r\n      mode=\"inline\"\r\n      theme=\"dark\"\r\n    >\r\n      { createNavLink()}\r\n    </Menu>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  useHistory,\r\n  // withRouter\r\n} from 'react-router-dom'\r\n\r\n// 问题：没有被Route组件直接包裹的React组件中，是没有路由API的。\r\n// 那该怎么办？\r\n// 在类组件中，只能使用 withRouter 来解决问题。\r\n// 在无状态组件中，可以使用 withRouter，也可以使用 useHistory来解决问题。\r\n\r\n// withRouter 是一个高阶组件，让那些没有被Route组件直接包裹的React组件拥有路由API\r\n// useHistory 是ReactRouter提供的Hooks API，帮助我们在无状态组件中使用路由API\r\n\r\n\r\n\r\n// 一、使用Hooks写法，来解决React无状态组件中没有路由API的问题\r\n\r\n\r\nexport default props => {\r\n  const history = useHistory()\r\n  console.log('---header props', props)\r\n  console.log('---header history', history)\r\n  return (\r\n    <div className='qf-header'>\r\n      header\r\n    </div>\r\n  )\r\n}\r\n\r\n// 二、使用withRouter高阶组件来解决React无状态组件中没有路由API的问题\r\n\r\n// export default withRouter(props=>{\r\n//   console.log('---header props', props)\r\n//   return (\r\n//     <div className='qf-header'>\r\n//       header\r\n//     </div>\r\n//   )\r\n// })\r\n\r\n\r\n// 三、使用 withRouter高阶组件，解决React类组件中没有路由API的问题\r\n// 有两种写法：装饰器的写法，或者 ES5函数调用的写法\r\n\r\n// @withRouter\r\n// class Header extends React.Component {\r\n//   render() {\r\n//     console.log('---header props', this.props)\r\n//     return (\r\n//       <div className='qf-header'>\r\n//         header\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n// export default Header\r\n// export default withRouter(Header)\r\n","import React from 'react'\r\n\r\nimport routes from '@/views'\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\nexport default props=>{\r\n\r\n  // 生成路由匹配规则，当url和Route.path匹配成功，显示当前配对成功的Route.component\r\n  // 凡是被 Route 组件直接包裹的React组件中，其props上都路由相关的API\r\n  const createRoutes = ()=>{\r\n    let res = []\r\n    // 这是递归方法\r\n    const recursionRoute = arr => {\r\n      arr.map(ele=>{\r\n        res.push(\r\n          <Route\r\n            key={ele.id}\r\n            path={ele.path}\r\n            component={ele.component}\r\n            exact\r\n          />\r\n        )\r\n        if(ele.children) recursionRoute(ele.children)\r\n        return undefined\r\n      })\r\n    }\r\n    routes.map(ele=>{\r\n      if(ele.children) {\r\n        // 调用递归方法，生成 Route 数组\r\n        recursionRoute(ele.children)\r\n      }\r\n      return undefined\r\n    })\r\n    return res\r\n  }\r\n\r\n  return (\r\n    <div className='qf-main'>\r\n      {/*\r\n        作用：用于把 Route数组组件包裹起来，当Url变化时从上到下进行匹配，匹配成功即终止\r\n        当Route数组被包裹起来，建议给 Route都加上exact属性。\r\n        在生成 Route 数组时，其外层不能包裹任何其实HTML节点，它的直接父组件只能是 Switch\r\n      */}\r\n      <Switch>\r\n        { createRoutes() }\r\n        <Redirect from='/*' to='/' />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Layout } from 'antd'\r\n\r\nimport QfSider from './Sider'\r\nimport QfHeader from './Header'\r\nimport QfMain from './Main'\r\nimport './style.scss'\r\n\r\nconst { Header, Sider, Content } = Layout\r\n\r\nexport default props=>{\r\n  return (\r\n    <div className='qf-layout'>\r\n      <Layout>\r\n        <Sider width='150'>\r\n          <QfSider />\r\n        </Sider>\r\n        <Layout>\r\n          <Header>\r\n            <QfHeader />\r\n          </Header>\r\n          <Content>\r\n            <QfMain />\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    </div>\r\n  )\r\n}\r\n","import {\r\n  createStore\r\n} from 'redux'\r\n\r\n// Reducer\r\n// 是函数，并且是纯函数\r\n// 它是redux的store中发挥核心作用的工具，是真正处理数据的地方\r\n// 必须store，必须要定义reducer\r\nlet initState = {\r\n  msg: 'hello 2009',\r\n  foo: {\r\n    count: 0\r\n  }\r\n}\r\nfunction reducer(state=initState, action) {\r\n  // 第一步，接收store给的信号（干什么、数据）\r\n  // 第二步，数据处理\r\n  // 第三步，把处理完的数据，返回给store\r\n  console.log('来自于视图组件的action====', action)\r\n  // 深复制\r\n  // let newState = {...state}\r\n  // let newState = Object.assign()\r\n  let newState = JSON.parse(JSON.stringify(state))\r\n  switch (action.type) {\r\n    case 'change':\r\n      newState.msg = action.payload\r\n      break\r\n    case 'add':\r\n      newState.foo.count += action.payload\r\n      break\r\n    default:\r\n      return state\r\n  }\r\n  return newState\r\n}\r\n\r\nconst store = createStore(reducer)\r\nexport default store\r\n\r\n\r\n// 如何使用redux？\r\n\r\n// 一、在src/store/index.js中定义store, 伪代码如下：\r\n\r\n// cnpm install redux -S\r\n// 1、创建store，怎么创建呢？ createStore(reducerFn)\r\n// 2、定义reducerFn， function reducerFn(state={}, action) { switch 语句 }\r\n// 3、export default store\r\n\r\n// 二、在App.js使用上下文引入store\r\n\r\n// cnpm install react-redux -S\r\n// import { Provider } from 'react-redux'\r\n// export default ()=>(<Provider store={store}></Provider>)\r\n\r\n// 三、在组件中，使用store数据\r\n\r\n// 有两种方式：一是使用connect()的写法，二是使用hooks写法：\r\n// 1、如果使用connect()的方式：export default connect(fn1, fn2)(Home)\r\n// 2、如果使用hooks的方式，const msg = useSelector(store=>store.msg)\r\n// 建议使用 hooks 写法\r\n","import { HashRouter } from 'react-router-dom'\nimport { Layout } from '@/components'\n\n// react-redux\nimport { Provider } from 'react-redux'\nimport store from '@/store'\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Provider store={store}>\n        <div className=\"app\">\n          <Layout />\n        </div>\n      </Provider>\n    </HashRouter>\n\n  );\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport '@/assets/css/common.scss'\nimport App from './App'\n\nimport 'antd/dist/antd.less'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n// <React.StrictMode>\n"],"sourceRoot":""}